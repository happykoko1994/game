const express = require("express");
const http = require("http");
const { Server } = require("socket.io");

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: ["https://game-1-rb2y.onrender.com", "http://localhost:3000"],
    methods: ["GET", "POST"],
    allowedHeaders: ["Content-Type"],
    credentials: true,
  },
});

require("dotenv").config();
const cors = require("cors");

const PORT = process.env.PORT || 4000;

app.use(
  cors({
    origin: ["https://game-1-rb2y.onrender.com", "http://localhost:3000"],
    methods: ["GET", "POST"],
  })
);

const questions = require("./questions");
const isSimilar = require("./utils/levenshtein");

let players = [];
let currentQuestionIndex = 0;

const updateScores = () => {
  const scores = players.reduce((acc, player) => {
    acc[player.id] = player.score;
    return acc;
  }, {});
  io.emit("updateScores", scores);
};

// –ú–∞—Å—Å–∏–≤ —ç–º–æ–¥–∑–∏
const emojis = ["ü¶Ñ", "üåµ", "ü¶ã", "ü¶â", "ü™ê", "üåà", "üêâ", "ü¶Ñ", "‚ö°", "üçÑ", "üé©", "üß©", "üåô", "üß∏", "ü™∂"];

let timer = null;
let timeRemaining = 15 * 60;

io.on("connection", (socket) => {
  console.log("A user connected", socket.id);

  // –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è
  socket.on("join", (name, score = 0, answered = false) => {
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏
    const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–µ—Ä–µ–¥ –Ω–∏–∫–æ–º
    players.push({ id: socket.id, name: randomEmoji + " " + name, answered, score });
    io.emit("updatePlayers", players);

    if (players.length > 0 && !timer) {
      timer = setInterval(() => {
        if (timeRemaining > 0) {
          timeRemaining -= 60; // –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1 –º–∏–Ω—É—Ç—É
          io.emit("log", `SERVER : <b>–û—Å—Ç–∞–ª–æ—Å—å ${Math.floor(timeRemaining / 60)} –º–∏–Ω</b>`);
        } else {
          clearInterval(timer);
          timer = null;
          io.emit("log", "SERVER : –í—Ä–µ–º—è –≤—ã—à–ª–æ!");
          // –ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        }
      }, 60000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Å —É—á—ë—Ç–æ–º –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if (currentQuestionIndex < questions.length) {
      const currentQuestion = questions[currentQuestionIndex];
      socket.emit("question", {
        newQuestion: currentQuestion.text,
        possibleAnswers: currentQuestion.answers,
      });
      socket.emit("revealAnswer", currentQuestion.answers);
    }
  });

  // –ò–≥—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç
  socket.on("submitAnswer", (answer) => {
    const player = players.find((p) => p.id === socket.id);
    if (player && !player.answered) {
      const question = questions[currentQuestionIndex];
      const matchedAnswer = question.answers.find(
        (a) => isSimilar(a.text, answer) && !a.revealed
      );

      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
      io.emit("log", `${player.name} : ${answer}`);

      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
      if (matchedAnswer) {
        player.answered = true;
        player.score += matchedAnswer.points;
        matchedAnswer.revealed = true;

        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        io.emit(
          "log",
          `${player.name} : –∑–∞ <strong>${matchedAnswer.text}</strong> –ø–æ–ª—É—á–∞–µ—Ç (${matchedAnswer.points} –±–∞–ª–ª–æ–≤!)`
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∏–≥—Ä–æ–∫–æ–≤
        io.emit("revealAnswer", question.answers);
        io.emit("updatePlayers", players);

        updateScores();
      }
    }
  });

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
  socket.on("nextQuestion", () => {
    if (currentQuestionIndex + 1 < questions.length) {
      currentQuestionIndex++;
      const nextQuestion = questions[currentQuestionIndex];

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
      players.forEach((p) => (p.answered = false));
      nextQuestion.answers.forEach((a) => (a.revealed = false));

      io.emit("question", {
        newQuestion: nextQuestion.text,
        possibleAnswers: nextQuestion.answers,
      });
      io.emit("updatePlayers", players);
    } else {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      const winner = players.reduce((max, player) =>
        player.score > (max?.score || 0) ? player : max,
        null
      );
      io.emit("endGame", { winner: winner?.name || "No winner" });
    }
  });

  // –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  socket.on("newGame", () => {
    currentQuestionIndex = 0;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∏–≥—Ä–æ–∫–æ–≤
    questions.forEach((q) => q.answers.forEach((a) => (a.revealed = false)));
    players.forEach((p) => {
      p.answered = false;
      p.score = 0;
    });

    io.emit("updatePlayers", players);
    io.emit("log", "New game started!");

    if (questions.length > 0) {
      io.emit("question", {
        newQuestion: questions[0].text,
        possibleAnswers: questions[0].answers,
      });
    }
  });

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
  socket.on("disconnect", () => {
    players = players.filter((p) => p.id !== socket.id);

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –ª–æ–±–±–∏ –ø—É—Å—Ç–æ–µ
    if (players.length === 0) {
      currentQuestionIndex = 0;
      io.emit("log", "Lobby is empty. Data reset.");
    }

    io.emit("updatePlayers", players);
  });
});

server.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
